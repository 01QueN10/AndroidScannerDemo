/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_scanlibrary_ScanActivity.h"
#include <android/log.h>
#include <opencv2/opencv.hpp>
#include <algorithm>
#include <string>
#include <vector>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc_c.h>
#include <android/bitmap.h>
#define APPNAME "Scanning"
using namespace cv;
using namespace std;

/* Header for class hellojni_com_hellojni_MainActivity */

Point2f computePoint(int p1, int p2) {
    Point2f pt;
    pt.x = p1;
    pt.y = p2;
    return pt;
}

Mat scan(Mat img, jfloat x1, jfloat y1, jfloat x2, jfloat y2, jfloat x3, jfloat y3, jfloat x4, jfloat y4) {

       __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Scaning scan() %f",x1);
       // define the destination image size:
        float w1 = sqrt( pow(x4 - x3 , 2) + pow(x4 - x3, 2));
        float w2 = sqrt( pow(x2 - x1 , 2) + pow(x2-x1, 2));
        float h1 = sqrt( pow(y2 - y4 , 2) + pow(y2 - y4, 2));
        float h2 = sqrt( pow(y1 - y3 , 2) + pow(y1-y3, 2));

        float maxWidth = (w1 < w2) ? w1 : w2;
        float maxHeight = (h1 < h2) ? h1 : h2;

         Mat dst = Mat::zeros(maxHeight, maxWidth, CV_8UC3);

          // corners of destination image with the sequence [tl, tr, bl, br]
          vector<Point2f> dst_pts, img_pts;
          dst_pts.push_back(Point(0, 0));
          dst_pts.push_back(Point(maxWidth - 1, 0));
          dst_pts.push_back(Point(0, maxHeight - 1));
          dst_pts.push_back(Point(maxWidth - 1, maxHeight - 1));

          img_pts.push_back(computePoint(x1,y1));
          img_pts.push_back(computePoint(x2,y2));
          img_pts.push_back(computePoint(x3,y3));
          img_pts.push_back(computePoint(x4,y4));

          // get transformation matrix
          Mat transmtx = getPerspectiveTransform(img_pts, dst_pts);
          // apply perspective transformation
          warpPerspective(img, dst, transmtx, dst.size());

         float alpha = 1.9;
         float beta = -80;
         dst.convertTo(dst, -1, alpha, beta);
         return dst;
}

jobject mat_to_bitmap(JNIEnv * env, Mat & src, bool needPremultiplyAlpha, jobject bitmap_config){
    jclass java_bitmap_class = (jclass)env->FindClass("android/graphics/Bitmap");
    jmethodID mid = env->GetStaticMethodID(java_bitmap_class,
            "createBitmap", "(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;");

    jobject bitmap = env->CallStaticObjectMethod(java_bitmap_class,
                        mid, src.size().width, src.size().height, bitmap_config);
    AndroidBitmapInfo  info;
    void*              pixels = 0;

    try {
            CV_Assert(AndroidBitmap_getInfo(env, bitmap, &info) >= 0);
            CV_Assert(src.type() == CV_8UC1 || src.type() == CV_8UC3 || src.type() == CV_8UC4);
            CV_Assert(AndroidBitmap_lockPixels(env, bitmap, &pixels) >= 0);
            CV_Assert(pixels);
            if(info.format == ANDROID_BITMAP_FORMAT_RGBA_8888){
                Mat tmp(info.height, info.width, CV_8UC4, pixels);
                if(src.type() == CV_8UC1){
                    cvtColor(src, tmp, CV_GRAY2RGBA);
                }else if(src.type() == CV_8UC3){
                    cvtColor(src, tmp, CV_RGB2RGBA);
                }else if(src.type() == CV_8UC4){
                    if(needPremultiplyAlpha){
                        cvtColor(src, tmp, COLOR_RGBA2mRGBA);
                    }else{
                        src.copyTo(tmp);
                    }
                }
            }else{
                // info.format == ANDROID_BITMAP_FORMAT_RGB_565
                Mat tmp(info.height, info.width, CV_8UC2, pixels);
                if(src.type() == CV_8UC1){
                    cvtColor(src, tmp, CV_GRAY2BGR565);
                }else if(src.type() == CV_8UC3){
                    cvtColor(src, tmp, CV_RGB2BGR565);
                }else if(src.type() == CV_8UC4){
                    cvtColor(src, tmp, CV_RGBA2BGR565);
                }
            }
            AndroidBitmap_unlockPixels(env, bitmap);
            return bitmap;
        }catch(cv::Exception e){
            AndroidBitmap_unlockPixels(env, bitmap);
            jclass je = env->FindClass("org/opencv/core/CvException");
            if(!je) je = env->FindClass("java/lang/Exception");
            env->ThrowNew(je, e.what());
            return bitmap;
        }catch (...){
            AndroidBitmap_unlockPixels(env, bitmap);
            jclass je = env->FindClass("java/lang/Exception");
            env->ThrowNew(je, "Unknown exception in JNI code {nMatToBitmap}");
            return bitmap;
        }
}

   JNIEXPORT jobject JNICALL Java_com_scanlibrary_ScanActivity_getScannedBitmap
      (JNIEnv *env, jobject thiz, jint width, jint height, jobject bitmap,jfloat x1,jfloat y1,jfloat x2, jfloat y2, jfloat x3,jfloat y3,jfloat x4,jfloat y4)
      {
       __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Scaning getString");
       int ret;
       AndroidBitmapInfo info;
       void* pixels = 0;

       if ((ret = AndroidBitmap_getInfo(env, bitmap, &info)) < 0) {
          __android_log_print(ANDROID_LOG_VERBOSE, APPNAME,"AndroidBitmap_getInfo() failed ! error=%d", ret);
           return NULL;
       }

       if (info.format != ANDROID_BITMAP_FORMAT_RGBA_8888 )
       {       __android_log_print(ANDROID_LOG_VERBOSE, APPNAME,"Bitmap format is not RGBA_8888!");
           return NULL;
       }

       if ((ret = AndroidBitmap_lockPixels(env, bitmap, &pixels)) < 0) {
          __android_log_print(ANDROID_LOG_VERBOSE, APPNAME,"AndroidBitmap_lockPixels() failed ! error=%d", ret);
       }

       // init our output image
       Mat mbgra(info.height, info.width, CV_8UC4, pixels);
       Mat dst = scan(mbgra,x1,y1,x2,y2,x3,y3,x4,y4);

       //get source bitmap's config
       jclass java_bitmap_class = (jclass)env->FindClass("android/graphics/Bitmap");
       jmethodID mid = env->GetMethodID(java_bitmap_class, "getConfig", "()Landroid/graphics/Bitmap$Config;");
       jobject bitmap_config = env->CallObjectMethod(bitmap, mid);
       jobject _bitmap = mat_to_bitmap(env,dst,false,bitmap_config);

       AndroidBitmap_unlockPixels(env, bitmap);
       return _bitmap;
      }


